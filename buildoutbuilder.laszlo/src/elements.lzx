<library>
  <library href="boilerplate.lzx"/>
  <library href="tags.lzx"/>

  <!--Toplevel classes -->
  <class name="dragelement">
    <!-- attributes -->
    <attribute name="save_x" type="number"/>
    <attribute name="save_y" type="number"/>
    <dragstate name="dragging"/>

    <!-- handlers -->
    <handler name="onmousedown">
      this.save_x = this.x;
      this.save_y = this.y;
      dragging.apply();
    </handler>
    
    <handler name="onmouseup">
      dragging.remove();
      this.animate("x",this.save_x,300);
      this.animate("y",this.save_y,300);
    </handler>
  </class>

  <!-- class option -->
  <class name="option" extends="removeable">
    <!-- attributes -->
    <attribute name="container" required="true"/>
    <attribute name="part" type="string"/>

    <!--handlers-->

    <!--iterate over the links and text -->

    <!-- layout -->
    <simplelayout axis="x"/>
    <view>
      <simplelayout axis="x"/>
      <text fontsize="12" fontstyle="bold" fgcolor="green" datapath="@name">
	<handler name="ondblclick">
	  var option = this.datapath.xpathQuery('@name')
	  last = this
	  while (last.datapath == null) {
	  last = this.parent
	  }

	  parent.parent.container['currentdraggable'] = new lz.draggablelink(parent.parent.container,{'parentdata':last.datapath,'part':parent.parent.part,'option':option})
	</handler>

	<handler name="onmousedown">
	  
	  if (parent.parent.container['currentdraggable'] != null) {

	  data_pointer = new LzDatapointer();
	  Debug.write(parent.parent.datapath)
	  data_pointer.setPointer(parent.parent.datapath.p)
	  
	  Debug.write(data_pointer)

	  new_value_element = new LzDataElement('value')
	  new_value_element.appendChild(parent.parent.container['currentdraggable']['node_element'])

	  if (new_value_element instanceof LzDatapath) {
	  Debug.write(new_value_element)
	  data_pointer.addNodeFromPointer(new_value_element)
	  } else {
	  element_pointer = new LzDatapointer();
	  element_pointer.setPointer(new_value_element)
	  Debug.write(element_pointer)
	  data_pointer.addNodeFromPointer(element_pointer)

	  }
      
	  parent.parent.container['currentdraggable'].destroy()
	  parent.parent.container['currentdraggable'] = null
	  
	  Debug.write('....')
	  }
	</handler>
      </text>
      <text> = </text>
    </view>
    <view>
      <simplelayout axis="y"/>
      <!-- every value -->
      <view>
	<simplelayout axis="y"/>
	<value container="${parent.parent.parent.container}">
	  <datapath xpath="value" pooling="true"/>
	</value>
      </view>

      <!-- to add a new value -->
      <view>
	<text>+
	  <handler name="onmousedown">
	    last = this
	    while (last.datapath == null) {
	    last = last.parent
	    }
	    //last.datapath.addNode('value')
	    var new_value_widget = new lz.valuewidget(parent)
	    new_value_widget.datanode = last.datapath
	  </handler>
	</text>
      </view>
    </view>
    
    
    
  </class>

  <!-- class part -->
  <class name="part">
    <!-- attributes -->
    <attribute name="container" required="true"/>
    <simplelayout axis="y" spacing="10"/>
    <text fontsize="15" fontstyle="bold" datapath="@name"/>
    <view>
      <simplelayout axis="y" spacing="10"/>
      <option datapath="option" part="${parent.parent.datapath.xpathQuery('@name')}" container="${parent.parent.container}"/>
    </view>
    <view name="newOption">
      <simplelayout axis="x" spacing="20"/>
      <edittext name="new_option_name"/>
      <button>Add Option
	<handler name="onclick">

	  new_name = parent.new_option_name.getText()
	  parent.new_option_name.setText('')
	  
	  if ( new_name != '' ) {

	  //if the values are ok
	  //create the node
	  var new_option_element = new LzDataElement('option',{'name':new_name});
	  
	  //create some pointers
	  var datapath_pointer = new LzDatapointer();
	  var element_pointer = new LzDatapointer();
	  
	  //set the pointers
	  datapath_pointer.setPointer(this.parent.parent.datapath.p);
	  element_pointer.setPointer(new_option_element);
	  
	  //add the element
	  datapath_pointer.addNodeFromPointer(element_pointer)

	  }
	  
	</handler>
      </button>
    </view>

  </class>
  

</library>
